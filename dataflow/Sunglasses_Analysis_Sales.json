{
	"name": "Sunglasses_Analysis_Sales",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "PrepTransactionData",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "prepSunGlasses",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "sunglassesSalesAnalysis",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "select1"
				},
				{
					"name": "rank1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          customer_id as string,",
				"          product_id as string,",
				"          quantity as integer,",
				"          transaction_date as date,",
				"          transaction_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source(output(",
				"          id as string,",
				"          model_name as string,",
				"          brand_name as string,",
				"          image_url as string,",
				"          market_price as double,",
				"          lenscart_price as double,",
				"          purchaseCount as integer,",
				"          size as string,",
				"          color as string,",
				"          width as string,",
				"          totalNoOfRatings as integer,",
				"          avgRating as double,",
				"          quantity as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source1, select1 join(product_id == id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 aggregate(groupBy(product_id,",
				"          model_name,",
				"          brand_name,",
				"          lenscart_price),",
				"     Total_No_Of_Products = sum(quantity)) ~> aggregate1",
				"source2 select(mapColumn(",
				"          id,",
				"          model_name,",
				"          brand_name,",
				"          image_url,",
				"          market_price,",
				"          lenscart_price,",
				"          purchaseCount,",
				"          size,",
				"          color,",
				"          width,",
				"          totalNoOfRatings,",
				"          avgRating",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"aggregate1 rank(desc(Total_No_Of_Products, true),",
				"     output(Rank as long)) ~> rank1",
				"rank1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}